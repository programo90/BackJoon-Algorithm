import java.util.*;
import java.io.*;

public class Main {
    static int MIN = Integer.MAX_VALUE;
    static int MAX = Integer.MIN_VALUE;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int num = Integer.parseInt(br.readLine());
        int[] arr = new int[num];
        int[] opers = new int[num-1];
        boolean[] used = new boolean[num-1];
        
        StringTokenizer st = new StringTokenizer(br.readLine());
        for(int i=0; i<num; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }
        
        st = new StringTokenizer(br.readLine());
        int idx = 0;
        for(int i=0; i<4; i++) {
            int operNum = Integer.parseInt(st.nextToken());
            while(operNum>0) {
                opers[idx++] = i;
                operNum--;
            }
        }
        
        dfs(1, arr[0], arr, opers, used);
        
        bw.write(MAX+"\n"+MIN+"\n");
        bw.flush();
    }
    
    static void dfs(int depth, int prev, int[] arr, int[] opers, boolean[] used) {
        if(depth==arr.length) {
            MIN = Math.min(MIN,prev);
            MAX = Math.max(MAX,prev);
            return;
        }
        
        for(int i=0; i<opers.length; i++) {
            if(used[i]) continue;
            
            used[i] = true;
            dfs(depth+1, cal(prev,arr[depth],opers[i]), arr, opers, used);
            used[i] = false;
        }
    }
    
    static int cal(int num1, int num2, int oper) {
        int result = 0;
        switch(oper) {
            case 0 :
                result = num1+num2;
                break;
            case 1:
                result = num1-num2;
                break;
            case 2:
                result = num1*num2;
                break;
            case 3:
                result = num1/num2;
                break;
        }
        return result;
    }
}