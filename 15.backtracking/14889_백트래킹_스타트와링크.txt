import java.util.*;
import java.io.*;

public class Main {
    static int MIN = Integer.MAX_VALUE;
    static int N;
    static boolean[] placed;
    static int[][] players;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        players = new int[N][N];
        placed = new boolean[N];
        
        StringTokenizer st;
        for(int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<N; j++) {
                players[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        
        bfs(0,0);
            
        bw.write(MIN+"\n");
        bw.flush();
    }
    
    public static void bfs(int begin, int depth) {
        //팀1에 선택된 선수의 숫자가 전체 선수의 절반이 되면 재귀를 멈취고
        //팀별 점수를 합산 후 점수차 구해 최소값에 저장한다.
        if(depth == N/2) {
            //팀1의 총점 r1과 팀2의 총점 r2의 차를 이전 최소값과 비교해서 최소값 재정의
            MIN = Math.min(MIN, getScore());
            return;
        }
        
        //bfs의 재귀는 팀1에 선택되는 선수의 조합을 만든다.
        for(int i=begin; i<N; i++) {
            if(placed[i]) continue;
            
            placed[i] = true;
            bfs(i+1,depth+1);
            placed[i] = false;
        }
    }
    
    public static int getScore() {
        int r1 = 0;
        int r2 = 0;
        for(int i=0; i<N; i++) {
            for(int j=0; j<N; j++) {
                //선택된 선수들의 합을 r1에 넣는다.
                if(placed[i] && placed[j]) {
                    r1 += players[i][j];
                }
                //선택 안된 선수들의 합을 r2에 넣는다.
                if(!placed[i] && !placed[j]) {
                    r2 += players[i][j];
                }
            }
        }        
        return Math.abs(r1-r2);
    }
}